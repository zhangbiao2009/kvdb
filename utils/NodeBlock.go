// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package utils

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NodeBlock struct {
	_tab flatbuffers.Table
}

func GetRootAsNodeBlock(buf []byte, offset flatbuffers.UOffsetT) *NodeBlock {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NodeBlock{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsNodeBlock(buf []byte, offset flatbuffers.UOffsetT) *NodeBlock {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NodeBlock{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *NodeBlock) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NodeBlock) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NodeBlock) IsLeaf() *bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		v := rcv._tab.GetBool(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *NodeBlock) MutateIsLeaf(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *NodeBlock) Padding() *int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		v := rcv._tab.GetInt8(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *NodeBlock) MutatePadding(n int8) bool {
	return rcv._tab.MutateInt8Slot(6, n)
}

func (rcv *NodeBlock) Nkeys() *uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		v := rcv._tab.GetUint16(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *NodeBlock) MutateNkeys(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *NodeBlock) ActualMemRequired() *uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		v := rcv._tab.GetUint16(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *NodeBlock) MutateActualMemRequired(n uint16) bool {
	return rcv._tab.MutateUint16Slot(10, n)
}

func (rcv *NodeBlock) UnusedMemStart() *uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		v := rcv._tab.GetUint16(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *NodeBlock) MutateUnusedMemStart(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func (rcv *NodeBlock) UnusedMemOffset() *uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		v := rcv._tab.GetUint16(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *NodeBlock) MutateUnusedMemOffset(n uint16) bool {
	return rcv._tab.MutateUint16Slot(14, n)
}

func (rcv *NodeBlock) KeyPtrArr(j int) uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *NodeBlock) KeyPtrArrLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *NodeBlock) MutateKeyPtrArr(j int, n uint16) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint16(a+flatbuffers.UOffsetT(j*2), n)
	}
	return false
}

func (rcv *NodeBlock) ValPtrArr(j int) uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *NodeBlock) ValPtrArrLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *NodeBlock) MutateValPtrArr(j int, n uint16) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint16(a+flatbuffers.UOffsetT(j*2), n)
	}
	return false
}

func (rcv *NodeBlock) ChildNodeId(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *NodeBlock) ChildNodeIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *NodeBlock) MutateChildNodeId(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func NodeBlockStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func NodeBlockAddIsLeaf(builder *flatbuffers.Builder, isLeaf bool) {
	builder.PrependBool(isLeaf)
	builder.Slot(0)
}
func NodeBlockAddPadding(builder *flatbuffers.Builder, padding int8) {
	builder.PrependInt8(padding)
	builder.Slot(1)
}
func NodeBlockAddNkeys(builder *flatbuffers.Builder, nkeys uint16) {
	builder.PrependUint16(nkeys)
	builder.Slot(2)
}
func NodeBlockAddActualMemRequired(builder *flatbuffers.Builder, actualMemRequired uint16) {
	builder.PrependUint16(actualMemRequired)
	builder.Slot(3)
}
func NodeBlockAddUnusedMemStart(builder *flatbuffers.Builder, unusedMemStart uint16) {
	builder.PrependUint16(unusedMemStart)
	builder.Slot(4)
}
func NodeBlockAddUnusedMemOffset(builder *flatbuffers.Builder, unusedMemOffset uint16) {
	builder.PrependUint16(unusedMemOffset)
	builder.Slot(5)
}
func NodeBlockAddKeyPtrArr(builder *flatbuffers.Builder, keyPtrArr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(keyPtrArr), 0)
}
func NodeBlockStartKeyPtrArrVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func NodeBlockAddValPtrArr(builder *flatbuffers.Builder, valPtrArr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(valPtrArr), 0)
}
func NodeBlockStartValPtrArrVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func NodeBlockAddChildNodeId(builder *flatbuffers.Builder, childNodeId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(childNodeId), 0)
}
func NodeBlockStartChildNodeIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NodeBlockEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
